                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f66805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # /*
                            | # * ncopy - copy src to dst, returning number of positive ints
                            | # * contained in src array.
                            | # */
                            | # word_t ncopy(word_t *src, word_t *dst, word_t len)
                            | # {
                            | #		word_t count = 0;
                            | #		word_t val;
                            | #
                            | #		while (len > 0) {
                            | #			val = *src++;
                            | #			*dst++ = val;
                            | #			if (val > 0)
                            | #				count++;
                            | #			len--;
                            | #		}
                            | #		return count;
                            | # }
                            | 
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len - 6 <= 0?
0x03e: 72b601000000000000   | 	jl Post 			# if so, goto Post:
                            | 
0x047:                      | Loop_1:	
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10					# read val from src...
0x051: 50970800000000000000 | 	mrmovq $8(%rdi), %r9				# read val from src...
0x05b: 62aa                 | 	andq %r10, %r10						# val <= 0?
0x05d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)					# ...and store it to dst
0x067: 40960800000000000000 | 	rmmovq %r9, $8(%rsi)				# ...and store it to dst
0x071: 718400000000000000   | 	jle Npos_1							# if so, goto Npos_1:
0x07a: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x084:                      | Npos_1:
0x084: 6299                 | 	andq %r9, %r9						# val <= 0?
0x086: 719900000000000000   | 	jle Npos_2							# if so, goto Npos_2:
0x08f: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x099:                      | Npos_2:	
0x099: 50b71000000000000000 | 	mrmovq $16(%rdi), %r11				# read val from src...
0x0a3: 50c71800000000000000 | 	mrmovq $24(%rdi), %r12				# read val from src...
0x0ad: 62bb                 | 	andq %r11, %r11						# val <= 0?
0x0af: 40b61000000000000000 | 	rmmovq %r11, $16(%rsi)				# ...and store it to dst
0x0b9: 40c61800000000000000 | 	rmmovq %r12, $24(%rsi)				# ...and store it to dst
0x0c3: 71d600000000000000   | 	jle Npos_3							# if so, goto Npos_1:
0x0cc: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x0d6:                      | Npos_3:
0x0d6: 62cc                 | 	andq %r12, %r12						# val <= 0?
0x0d8: 71eb00000000000000   | 	jle Npos_4							# if so, goto Npos_2:
0x0e1: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x0eb:                      | Npos_4:	
0x0eb: 50d72000000000000000 | 	mrmovq $32(%rdi), %r13				# read val from src...
0x0f5: 50e72800000000000000 | 	mrmovq $40(%rdi), %r14				# read val from src...
0x0ff: 62dd                 | 	andq %r13, %r13						# val <= 0?
0x101: 40d62000000000000000 | 	rmmovq %r13, $32(%rsi)				# ...and store it to dst
0x10b: 40e62800000000000000 | 	rmmovq %r14, $40(%rsi)				# ...and store it to dst
0x115: 712801000000000000   | 	jle Npos_5							# if so, goto Npos_1:
0x11e: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x128:                      | Npos_5:
0x128: 62ee                 | 	andq %r14, %r14						# val <= 0?
0x12a: 713d01000000000000   | 	jle Npos_6							# if so, goto Npos_2:
0x133: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x13d:                      | Npos_6:	
0x13d: 50873000000000000000 | 	mrmovq $48(%rdi), %r8				# read val from src...
0x147: 50173800000000000000 | 	mrmovq $56(%rdi), %rcx				# read val from src...
0x151: 6288                 | 	andq %r8, %r8						# val <= 0?
0x153: 40863000000000000000 | 	rmmovq %r8, $48(%rsi)				# ...and store it to dst
0x15d: 40163800000000000000 | 	rmmovq %rcx, $56(%rsi)				# ...and store it to dst
0x167: 717a01000000000000   | 	jle Npos_7							# if so, goto Npos_1:
0x170: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x17a:                      | Npos_7:
0x17a: 6211                 | 	andq %rcx, %rcx						# val <= 0?
0x17c: 718f01000000000000   | 	jle Npos_8							# if so, goto Npos_2:
0x185: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x18f:                      | Npos_8:
0x18f: c0f74000000000000000 | 	iaddq $64, %rdi		# src+=6
0x199: c0f64000000000000000 | 	iaddq $64, %rsi		# dst+=6
0x1a3: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len-=6
                            | 
0x1ad: 754700000000000000   | 	jge Loop_1			# if so, goto Loop:
                            | 
0x1b6:                      | Post:
0x1b6: c0f20800000000000000 | 	iaddq $8, %rdx
0x1c0: 715703000000000000   | 	jle Done			# if so, goto Done:
                            | 
                            | # 7, 6, 5, 4, 3, 2, 1
0x1c9:                      | Jump_1:
0x1c9: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x1d3: 721302000000000000   | 	jl Jump_3
0x1dc: 76ee01000000000000   | 	jg Jump_2
0x1e5: 73b302000000000000   | 	je R4
                            | 
                            | # 5, 4
0x1ee:                      | Jump_2:
0x1ee: c0f2feffffffffffffff | 	iaddq $-2, %rdx 		# %rdx + 4 - 6
0x1f8: 728a02000000000000   | 	jl R5
0x201: 763802000000000000   | 	jg R7
0x20a: 736102000000000000   | 	je R6
                            | 
                            | # 2, 1
0x213:                      | Jump_3:
0x213: c0f20200000000000000 | 	iaddq $2, %rdx 		# %rdx + 4 - 2
0x21d: 722e03000000000000   | 	jl R1
0x226: 76dc02000000000000   | 	jg R3
0x22f: 730503000000000000   | 	je R2
                            | 
0x238:                      | R7:
0x238: 50a73000000000000000 | 	mrmovq $48(%rdi), %r10	# read val from src...
0x242: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x244: 40a63000000000000000 | 	rmmovq %r10, $48(%rsi)	# ...and store it to dst
0x24e: 716102000000000000   | 	jle R6					# if so, goto Npos:
0x257: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
                            | 
0x261:                      | R6:
0x261: 50a72800000000000000 | 	mrmovq $40(%rdi), %r10	# read val from src...
0x26b: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x26d: 40a62800000000000000 | 	rmmovq %r10, $40(%rsi)	# ...and store it to dst
0x277: 718a02000000000000   | 	jle R5					# if so, goto Npos:
0x280: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
                            | 
0x28a:                      | R5:
0x28a: 50a72000000000000000 | 	mrmovq $32(%rdi), %r10	# read val from src...
0x294: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x296: 40a62000000000000000 | 	rmmovq %r10, $32(%rsi)	# ...and store it to dst
0x2a0: 71b302000000000000   | 	jle R4					# if so, goto Npos:
0x2a9: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
                            | 
0x2b3:                      | R4:
0x2b3: 50a71800000000000000 | 	mrmovq $24(%rdi), %r10	# read val from src...
0x2bd: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x2bf: 40a61800000000000000 | 	rmmovq %r10, $24(%rsi)	# ...and store it to dst
0x2c9: 71dc02000000000000   | 	jle R3					# if so, goto Npos:
0x2d2: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
0x2dc:                      | R3:
0x2dc: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10	# read val from src...
0x2e6: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x2e8: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi)	# ...and store it to dst
0x2f2: 710503000000000000   | 	jle R2					# if so, goto Npos:
0x2fb: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
0x305:                      | R2:
0x305: 50a70800000000000000 | 	mrmovq $8(%rdi), %r10	# read val from src...
0x30f: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x311: 40a60800000000000000 | 	rmmovq %r10, $8(%rsi)	# ...and store it to dst
0x31b: 712e03000000000000   | 	jle R1					# if so, goto Npos:
0x324: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
0x32e:                      | R1:
0x32e: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x338: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x33a: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x344: 715703000000000000   | 	jle Done				# if so, goto Npos:
0x34d: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x357:                      | Done:
0x357: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x358:                      | End:
                            | #/* $end ncopy-ys */
0x358:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x358:                      | 	.align 8
0x358:                      | src:
0x358: ffffffffffffffff     | 	.quad -1
0x360: feffffffffffffff     | 	.quad -2
0x368: fdffffffffffffff     | 	.quad -3
0x370: fcffffffffffffff     | 	.quad -4
0x378: fbffffffffffffff     | 	.quad -5
0x380: faffffffffffffff     | 	.quad -6
0x388: 0700000000000000     | 	.quad 7
0x390: 0800000000000000     | 	.quad 8
0x398: f7ffffffffffffff     | 	.quad -9
0x3a0: 0a00000000000000     | 	.quad 10
0x3a8: f5ffffffffffffff     | 	.quad -11
0x3b0: f4ffffffffffffff     | 	.quad -12
0x3b8: 0d00000000000000     | 	.quad 13
0x3c0: f2ffffffffffffff     | 	.quad -14
0x3c8: f1ffffffffffffff     | 	.quad -15
0x3d0: 1000000000000000     | 	.quad 16
0x3d8: efffffffffffffff     | 	.quad -17
0x3e0: eeffffffffffffff     | 	.quad -18
0x3e8: edffffffffffffff     | 	.quad -19
0x3f0: ecffffffffffffff     | 	.quad -20
0x3f8: ebffffffffffffff     | 	.quad -21
0x400: eaffffffffffffff     | 	.quad -22
0x408: e9ffffffffffffff     | 	.quad -23
0x410: e8ffffffffffffff     | 	.quad -24
0x418: 1900000000000000     | 	.quad 25
0x420: 1a00000000000000     | 	.quad 26
0x428: 1b00000000000000     | 	.quad 27
0x430: e4ffffffffffffff     | 	.quad -28
0x438: e3ffffffffffffff     | 	.quad -29
0x440: e2ffffffffffffff     | 	.quad -30
0x448: e1ffffffffffffff     | 	.quad -31
0x450: e0ffffffffffffff     | 	.quad -32
0x458: 2100000000000000     | 	.quad 33
0x460: deffffffffffffff     | 	.quad -34
0x468: 2300000000000000     | 	.quad 35
0x470: dcffffffffffffff     | 	.quad -36
0x478: dbffffffffffffff     | 	.quad -37
0x480: 2600000000000000     | 	.quad 38
0x488: d9ffffffffffffff     | 	.quad -39
0x490: d8ffffffffffffff     | 	.quad -40
0x498: d7ffffffffffffff     | 	.quad -41
0x4a0: d6ffffffffffffff     | 	.quad -42
0x4a8: d5ffffffffffffff     | 	.quad -43
0x4b0: 2c00000000000000     | 	.quad 44
0x4b8: 2d00000000000000     | 	.quad 45
0x4c0: 2e00000000000000     | 	.quad 46
0x4c8: 2f00000000000000     | 	.quad 47
0x4d0: 3000000000000000     | 	.quad 48
0x4d8: 3100000000000000     | 	.quad 49
0x4e0: 3200000000000000     | 	.quad 50
0x4e8: 3300000000000000     | 	.quad 51
0x4f0: 3400000000000000     | 	.quad 52
0x4f8: 3500000000000000     | 	.quad 53
0x500: 3600000000000000     | 	.quad 54
0x508: 3700000000000000     | 	.quad 55
0x510: 3800000000000000     | 	.quad 56
0x518: 3900000000000000     | 	.quad 57
0x520: 3a00000000000000     | 	.quad 58
0x528: 3b00000000000000     | 	.quad 59
0x530: 3c00000000000000     | 	.quad 60
0x538: 3d00000000000000     | 	.quad 61
0x540: 3e00000000000000     | 	.quad 62
0x548: 3f00000000000000     | 	.quad 63
0x550: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x560:                      | 	.align 16
0x560:                      | Predest:
0x560: fadebc0000000000     | 	.quad 0xbcdefa
0x568:                      | dest:
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760:                      | Postdest:
0x760: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x768:                      | .align 8
                            | # Run time stack
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
                            | 
0x7e8:                      | Stack:
