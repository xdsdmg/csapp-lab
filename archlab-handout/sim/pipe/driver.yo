                            | #######################################################################
                            | # Test for copying block of size 6;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20600000000000000 | 	irmovq $6, %rdx		# src and dst have 6 elements
0x014: 30f65804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80ab02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # /*
                            | # * ncopy - copy src to dst, returning number of positive ints
                            | # * contained in src array.
                            | # */
                            | # word_t ncopy(word_t *src, word_t *dst, word_t len)
                            | # {
                            | #		word_t count = 0;
                            | #		word_t val;
                            | #
                            | #		while (len > 0) {
                            | #			val = *src++;
                            | #			*dst++ = val;
                            | #			if (val > 0)
                            | #				count++;
                            | #			len--;
                            | #		}
                            | #		return count;
                            | # }
                            | 
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# len - 6 <= 0?
0x047: 726d01000000000000   | 	jl Post 			# if so, goto Post:
                            | 
0x050:                      | Loop_1:	
0x050: 50a70000000000000000 | 	mrmovq (%rdi), %r10					# read val from src...
0x05a: 50970800000000000000 | 	mrmovq $8(%rdi), %r9				# read val from src...
0x064: 62aa                 | 	andq %r10, %r10						# val <= 0?
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)					# ...and store it to dst
0x070: 40960800000000000000 | 	rmmovq %r9, $8(%rsi)				# ...and store it to dst
0x07a: 718d00000000000000   | 	jle Npos_1							# if so, goto Npos_1:
0x083: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x08d:                      | Npos_1:
0x08d: 6299                 | 	andq %r9, %r9						# val <= 0?
0x08f: 71a200000000000000   | 	jle Npos_2							# if so, goto Npos_2:
0x098: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x0a2:                      | Npos_2:	
0x0a2: 50b71000000000000000 | 	mrmovq $16(%rdi), %r11				# read val from src...
0x0ac: 50c71800000000000000 | 	mrmovq $24(%rdi), %r12				# read val from src...
0x0b6: 62bb                 | 	andq %r11, %r11						# val <= 0?
0x0b8: 40b61000000000000000 | 	rmmovq %r11, $16(%rsi)				# ...and store it to dst
0x0c2: 40c61800000000000000 | 	rmmovq %r12, $24(%rsi)				# ...and store it to dst
0x0cc: 71df00000000000000   | 	jle Npos_3							# if so, goto Npos_1:
0x0d5: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x0df:                      | Npos_3:
0x0df: 62cc                 | 	andq %r12, %r12						# val <= 0?
0x0e1: 71f400000000000000   | 	jle Npos_4							# if so, goto Npos_2:
0x0ea: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x0f4:                      | Npos_4:	
0x0f4: 50d72000000000000000 | 	mrmovq $32(%rdi), %r13				# read val from src...
0x0fe: 50e72800000000000000 | 	mrmovq $40(%rdi), %r14				# read val from src...
0x108: 62dd                 | 	andq %r13, %r13						# val <= 0?
0x10a: 40d62000000000000000 | 	rmmovq %r13, $32(%rsi)				# ...and store it to dst
0x114: 40e62800000000000000 | 	rmmovq %r14, $40(%rsi)				# ...and store it to dst
0x11e: 713101000000000000   | 	jle Npos_5							# if so, goto Npos_1:
0x127: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x131:                      | Npos_5:
0x131: 62ee                 | 	andq %r14, %r14						# val <= 0?
0x133: 714601000000000000   | 	jle Npos_6							# if so, goto Npos_2:
0x13c: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x146:                      | Npos_6:
0x146: c0f73000000000000000 | 	iaddq $48, %rdi		# src+=6
0x150: c0f63000000000000000 | 	iaddq $48, %rsi		# dst+=6
0x15a: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# len-=6
                            | 
0x164: 755000000000000000   | 	jge Loop_1			# if so, goto Loop:
                            | 
0x16d:                      | Post:
0x16d: c0f20600000000000000 | 	iaddq $6, %rdx
0x177: 71aa02000000000000   | 	jle Done			# if so, goto Done:
                            | 
                            | # 5, 4, 3, 2, 1
0x180:                      | Jump_1:
0x180: c0f2fdffffffffffffff | 	iaddq $-3, %rdx
0x18a: 76a501000000000000   | 	jg Jump_2
0x193: 732f02000000000000   | 	je R3
0x19c: 72c101000000000000   | 	jl Jump_3
                            | 
                            | # 5, 4
0x1a5:                      | Jump_2:
0x1a5: c0f2ffffffffffffffff | 	iaddq $-1, %rdx 		# %rdx + 3 - 4
0x1af: 76dd01000000000000   | 	jg R5
0x1b8: 710602000000000000   | 	jle R4
                            | 
                            | # 2, 1
0x1c1:                      | Jump_3:
0x1c1: c0f20200000000000000 | 	iaddq $2, %rdx 		# %rdx + 3 - 1
0x1cb: 765802000000000000   | 	jg R2
0x1d4: 718102000000000000   | 	jle R1
                            | 
0x1dd:                      | R5:
0x1dd: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x1e7: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x1e9: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x1f3: 710602000000000000   | 	jle R4					# if so, goto Npos:
0x1fc: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
                            | 
0x206:                      | R4:
0x206: 50a71800000000000000 | 	mrmovq $24(%rdi), %r10	# read val from src...
0x210: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x212: 40a61800000000000000 | 	rmmovq %r10, $24(%rsi)	# ...and store it to dst
0x21c: 712f02000000000000   | 	jle R3					# if so, goto Npos:
0x225: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
0x22f:                      | R3:
0x22f: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10	# read val from src...
0x239: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x23b: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi)	# ...and store it to dst
0x245: 715802000000000000   | 	jle R2					# if so, goto Npos:
0x24e: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
0x258:                      | R2:
0x258: 50a70800000000000000 | 	mrmovq $8(%rdi), %r10	# read val from src...
0x262: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x264: 40a60800000000000000 | 	rmmovq %r10, $8(%rsi)	# ...and store it to dst
0x26e: 718102000000000000   | 	jle R1					# if so, goto Npos:
0x277: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
0x281:                      | R1:
0x281: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x28b: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x28d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x297: 71aa02000000000000   | 	jle Done				# if so, goto Npos:
0x2a0: c0f00100000000000000 | 	iaddq $1, %rax			# count++	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2aa:                      | Done:
0x2aa: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2ab:                      | End:
                            | #/* $end ncopy-ys */
0x2ab:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 2.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x2ab:                      | check:
                            | 	# Return value test
0x2ab: 30fa0200000000000000 | 	irmovq $2,%r10
0x2b5: 61a0                 | 	subq %r10,%rax
0x2b7: 73d302000000000000   | 	je checkb
0x2c0: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2ca: 701104000000000000   | 	jmp cdone
0x2d3:                      | checkb:
                            | 	# Code length check
0x2d3: 30f0ab02000000000000 | 	irmovq EndFun,%rax
0x2dd: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2e7: 6120                 | 	subq %rdx,%rax
0x2e9: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2f3: 6102                 | 	subq %rax,%rdx
0x2f5: 751103000000000000   | 	jge checkm
0x2fe: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x308: 701104000000000000   | 	jmp cdone
0x311:                      | checkm:
0x311: 30f25804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x31b: 30f31804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x325: 30f70600000000000000 | 	irmovq $6,%rdi  # Count
0x32f: 6277                 | 	andq %rdi,%rdi
0x331: 738f03000000000000   | 	je checkpre         # Skip check if count = 0
0x33a:                      | mcloop:
0x33a: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x344: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x34e: 6160                 | 	subq %rsi,%rax
0x350: 736c03000000000000   | 	je  mok
0x359: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x363: 701104000000000000   | 	jmp cdone
0x36c:                      | mok:
0x36c: 30f00800000000000000 | 	irmovq $8,%rax
0x376: 6002                 | 	addq %rax,%rdx	  # dest ++
0x378: 6003                 | 	addq %rax,%rbx    # src++
0x37a: 30f00100000000000000 | 	irmovq $1,%rax
0x384: 6107                 | 	subq %rax,%rdi    # cnt--
0x386: 763a03000000000000   | 	jg mcloop
0x38f:                      | checkpre:
                            | 	# Check for corruption
0x38f: 30f25004000000000000 | 	irmovq Predest,%rdx
0x399: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x3a3: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x3ad: 6120                 | 	subq %rdx,%rax
0x3af: 73cb03000000000000   | 	je checkpost
0x3b8: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3c2: 701104000000000000   | 	jmp cdone
0x3cb:                      | checkpost:
                            | 	# Check for corruption
0x3cb: 30f28804000000000000 | 	irmovq Postdest,%rdx
0x3d5: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3df: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3e9: 6120                 | 	subq %rdx,%rax
0x3eb: 730704000000000000   | 	je checkok
0x3f4: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x3fe: 701104000000000000   | 	jmp cdone
0x407:                      | checkok:
                            | 	# Successful checks
0x407: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x411:                      | cdone:
0x411: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: 0100000000000000     | 	.quad 1
0x420: feffffffffffffff     | 	.quad -2
0x428: fdffffffffffffff     | 	.quad -3
0x430: fcffffffffffffff     | 	.quad -4
0x438: fbffffffffffffff     | 	.quad -5
0x440: 0600000000000000     | 	.quad 6
0x448: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x450:                      | 	.align 16
0x450:                      | Predest:
0x450: fadebc0000000000     | 	.quad 0xbcdefa
0x458:                      | dest:
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488:                      | Postdest:
0x488: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x490:                      | .align 8
                            | # Run time stack
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
                            | 
0x510:                      | Stack:
