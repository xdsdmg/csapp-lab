#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# /*
# * ncopy - copy src to dst, returning number of positive ints
# * contained in src array.
# */
# word_t ncopy(word_t *src, word_t *dst, word_t len)
# {
#		word_t count = 0;
#		word_t val;
#
#		while (len > 0) {
#			val = *src++;
#			*dst++ = val;
#			if (val > 0)
#				count++;
#			len--;
#		}
#		return count;
# }

# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	rrmovq %rdx,%rcx	
	iaddq $-6, %rcx		# len - 6 <= 0?
	jle Post_2 			# if so, goto Post:

Loop_1:	
	mrmovq (%rdi), %r10					# read val from src...
	rmmovq %r10, (%rsi)					# ...and store it to dst
	andq %r10, %r10						# val <= 0?
	jle Npos_1							# if so, goto Npos_1:
	iaddq $1, %r8						# count_1++

Npos_1:	mrmovq $8(%rdi), %r10			# read val from src...
	rmmovq %r10, $8(%rsi)				# ...and store it to dst
	andq %r10, %r10						# val <= 0?
	jle Npos_2							# if so, goto Npos_2:
	iaddq $1, %r9						# count_2++

Npos_2:	mrmovq $16(%rdi), %r10			# read val from src...
	rmmovq %r10, $16(%rsi)				# ...and store it to dst
	andq %r10, %r10						# val <= 0?
	jle Npos_3							# if so, goto Npos_2:
	iaddq $1, %r11						# count_3++

Npos_3:	mrmovq $24(%rdi), %r10			# read val from src...
	rmmovq %r10, $24(%rsi)				# ...and store it to dst
	andq %r10, %r10						# val <= 0?
	jle Npos_4							# if so, goto Npos_2:
	iaddq $1, %r12						# count_4++

Npos_4:	mrmovq $32(%rdi), %r10			# read val from src...
	rmmovq %r10, $32(%rsi)				# ...and store it to dst
	andq %r10, %r10						# val <= 0?
	jle Npos_5							# if so, goto Npos_2:
	iaddq $1, %r13						# count_5++

Npos_5:	mrmovq $40(%rdi), %r10			# read val from src...
	rmmovq %r10, $40(%rsi)				# ...and store it to dst
	andq %r10, %r10						# val <= 0?
	jle Npos_6							# if so, goto Npos_2:
	iaddq $1, %r14						# count_6++

Npos_6:
	iaddq $-6, %rdx		# len-=6
	iaddq $48, %rdi		# src+=6
	iaddq $48, %rsi		# dst+=6
	rrmovq %rdx,%rcx	
	iaddq $-6, %rcx		# len - 6 <= 0?
	jg Loop_1			# if so, goto Loop:

Post_1:
	addq %r8, %r9
	addq %r11, %r12
	addq %r13, %r14
	addq %r9, %r12
	addq %r14, %rax
	addq %r12, %rax

Post_2:
	andq %rdx,%rdx		# len <= 0?
	jle Done			# if so, goto Done:

Loop_2:	
	mrmovq (%rdi), %r10		# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
	andq %r10, %r10			# val <= 0?
	jle Npos_7				# if so, goto Npos:
	iaddq $1, %rax			# count++

Npos_7:	
	iaddq $-1, %rdx		# len--
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
	andq %rdx,%rdx		# len > 0?
	jg Loop_2			# if so, goto Loop_2:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
