#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# /*
# * ncopy - copy src to dst, returning number of positive ints
# * contained in src array.
# */
# word_t ncopy(word_t *src, word_t *dst, word_t len)
# {
#		word_t count = 0;
#		word_t val;
#
#		while (len > 0) {
#			val = *src++;
#			*dst++ = val;
#			if (val > 0)
#				count++;
#			len--;
#		}
#		return count;
# }

# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-8, %rdx		# len - 6 <= 0?
	jl Post 			# if so, goto Post:

Loop_1:	
	mrmovq (%rdi), %r10					# read val from src...
	mrmovq $8(%rdi), %r9				# read val from src...
	andq %r10, %r10						# val <= 0?
	rmmovq %r10, (%rsi)					# ...and store it to dst
	rmmovq %r9, $8(%rsi)				# ...and store it to dst
	jle Npos_1							# if so, goto Npos_1:
	iaddq $1, %rax						# count_1++

Npos_1:
	andq %r9, %r9						# val <= 0?
	jle Npos_2							# if so, goto Npos_2:
	iaddq $1, %rax						# count_1++

Npos_2:	
	mrmovq $16(%rdi), %r11				# read val from src...
	mrmovq $24(%rdi), %r12				# read val from src...
	andq %r11, %r11						# val <= 0?
	rmmovq %r11, $16(%rsi)				# ...and store it to dst
	rmmovq %r12, $24(%rsi)				# ...and store it to dst
	jle Npos_3							# if so, goto Npos_1:
	iaddq $1, %rax						# count_1++

Npos_3:
	andq %r12, %r12						# val <= 0?
	jle Npos_4							# if so, goto Npos_2:
	iaddq $1, %rax						# count_1++

Npos_4:	
	mrmovq $32(%rdi), %r13				# read val from src...
	mrmovq $40(%rdi), %r14				# read val from src...
	andq %r13, %r13						# val <= 0?
	rmmovq %r13, $32(%rsi)				# ...and store it to dst
	rmmovq %r14, $40(%rsi)				# ...and store it to dst
	jle Npos_5							# if so, goto Npos_1:
	iaddq $1, %rax						# count_1++

Npos_5:
	andq %r14, %r14						# val <= 0?
	jle Npos_6							# if so, goto Npos_2:
	iaddq $1, %rax						# count_1++

Npos_6:	
	mrmovq $48(%rdi), %r8				# read val from src...
	mrmovq $56(%rdi), %rcx				# read val from src...
	andq %r8, %r8						# val <= 0?
	rmmovq %r8, $48(%rsi)				# ...and store it to dst
	rmmovq %rcx, $56(%rsi)				# ...and store it to dst
	jle Npos_7							# if so, goto Npos_1:
	iaddq $1, %rax						# count_1++

Npos_7:
	andq %rcx, %rcx						# val <= 0?
	jle Npos_8							# if so, goto Npos_2:
	iaddq $1, %rax						# count_1++

Npos_8:
	iaddq $64, %rdi		# src+=6
	iaddq $64, %rsi		# dst+=6
	iaddq $-8, %rdx		# len-=6

	jge Loop_1			# if so, goto Loop:

Post:
	iaddq $8, %rdx
	jle Done			# if so, goto Done:

# 7, 6, 5, 4, 3, 2, 1
Jump_1:
	iaddq $-4, %rdx
	jl Jump_3
	jg Jump_2
	je R4

# 5, 4
Jump_2:
	iaddq $-2, %rdx 		# %rdx + 4 - 6
	jl R5
	jg R7
	je R6

# 2, 1
Jump_3:
	iaddq $2, %rdx 		# %rdx + 4 - 2
	jl R1
	jg R3
	je R2

R7:
	mrmovq $48(%rdi), %r10	# read val from src...
	andq %r10, %r10			# val <= 0?
	rmmovq %r10, $48(%rsi)	# ...and store it to dst
	jle R6					# if so, goto Npos:
	iaddq $1, %rax			# count++	

R6:
	mrmovq $40(%rdi), %r10	# read val from src...
	andq %r10, %r10			# val <= 0?
	rmmovq %r10, $40(%rsi)	# ...and store it to dst
	jle R5					# if so, goto Npos:
	iaddq $1, %rax			# count++	

R5:
	mrmovq $32(%rdi), %r10	# read val from src...
	andq %r10, %r10			# val <= 0?
	rmmovq %r10, $32(%rsi)	# ...and store it to dst
	jle R4					# if so, goto Npos:
	iaddq $1, %rax			# count++	

R4:
	mrmovq $24(%rdi), %r10	# read val from src...
	andq %r10, %r10			# val <= 0?
	rmmovq %r10, $24(%rsi)	# ...and store it to dst
	jle R3					# if so, goto Npos:
	iaddq $1, %rax			# count++	
R3:
	mrmovq $16(%rdi), %r10	# read val from src...
	andq %r10, %r10			# val <= 0?
	rmmovq %r10, $16(%rsi)	# ...and store it to dst
	jle R2					# if so, goto Npos:
	iaddq $1, %rax			# count++	
R2:
	mrmovq $8(%rdi), %r10	# read val from src...
	andq %r10, %r10			# val <= 0?
	rmmovq %r10, $8(%rsi)	# ...and store it to dst
	jle R1					# if so, goto Npos:
	iaddq $1, %rax			# count++	
R1:
	mrmovq (%rdi), %r10		# read val from src...
	andq %r10, %r10			# val <= 0?
	rmmovq %r10, (%rsi)		# ...and store it to dst
	jle Done				# if so, goto Npos:
	iaddq $1, %rax			# count++	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad -4
	.quad -5
	.quad -6
	.quad 7
	.quad 8
	.quad -9
	.quad 10
	.quad -11
	.quad -12
	.quad 13
	.quad -14
	.quad -15
	.quad 16
	.quad -17
	.quad -18
	.quad -19
	.quad -20
	.quad -21
	.quad -22
	.quad -23
	.quad -24
	.quad 25
	.quad 26
	.quad 27
	.quad -28
	.quad -29
	.quad -30
	.quad -31
	.quad -32
	.quad 33
	.quad -34
	.quad 35
	.quad -36
	.quad -37
	.quad 38
	.quad -39
	.quad -40
	.quad -41
	.quad -42
	.quad -43
	.quad 44
	.quad 45
	.quad 46
	.quad 47
	.quad 48
	.quad 49
	.quad 50
	.quad 51
	.quad 52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
