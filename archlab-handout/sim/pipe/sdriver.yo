                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6f801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # /*
                            | # * ncopy - copy src to dst, returning number of positive ints
                            | # * contained in src array.
                            | # */
                            | # word_t ncopy(word_t *src, word_t *dst, word_t len)
                            | # {
                            | #		word_t count = 0;
                            | #		word_t val;
                            | #
                            | #		while (len > 0) {
                            | #			val = *src++;
                            | #			*dst++ = val;
                            | #			if (val > 0)
                            | #				count++;
                            | #			len--;
                            | #		}
                            | #		return count;
                            | # }
                            | 
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# len - 6 <= 0?
0x03e: 716401000000000000   | 	jle Post 			# if so, goto Post:
                            | 
0x047:                      | Loop_1:	
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10					# read val from src...
0x051: 50970800000000000000 | 	mrmovq $8(%rdi), %r9				# read val from src...
0x05b: 62aa                 | 	andq %r10, %r10						# val <= 0?
0x05d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)					# ...and store it to dst
0x067: 40960800000000000000 | 	rmmovq %r9, $8(%rsi)				# ...and store it to dst
0x071: 718400000000000000   | 	jle Npos_1							# if so, goto Npos_1:
0x07a: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x084:                      | Npos_1:
0x084: 6299                 | 	andq %r9, %r9						# val <= 0?
0x086: 719900000000000000   | 	jle Npos_2							# if so, goto Npos_2:
0x08f: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x099:                      | Npos_2:	
0x099: 50b71000000000000000 | 	mrmovq $16(%rdi), %r11				# read val from src...
0x0a3: 50c71800000000000000 | 	mrmovq $24(%rdi), %r12				# read val from src...
0x0ad: 62bb                 | 	andq %r11, %r11						# val <= 0?
0x0af: 40b61000000000000000 | 	rmmovq %r11, $16(%rsi)				# ...and store it to dst
0x0b9: 40c61800000000000000 | 	rmmovq %r12, $24(%rsi)				# ...and store it to dst
0x0c3: 71d600000000000000   | 	jle Npos_3							# if so, goto Npos_1:
0x0cc: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x0d6:                      | Npos_3:
0x0d6: 62cc                 | 	andq %r12, %r12						# val <= 0?
0x0d8: 71eb00000000000000   | 	jle Npos_4							# if so, goto Npos_2:
0x0e1: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x0eb:                      | Npos_4:	
0x0eb: 50d72000000000000000 | 	mrmovq $32(%rdi), %r13				# read val from src...
0x0f5: 50e72800000000000000 | 	mrmovq $40(%rdi), %r14				# read val from src...
0x0ff: 62dd                 | 	andq %r13, %r13						# val <= 0?
0x101: 40d62000000000000000 | 	rmmovq %r13, $32(%rsi)					# ...and store it to dst
0x10b: 40e62800000000000000 | 	rmmovq %r14, $40(%rsi)				# ...and store it to dst
0x115: 712801000000000000   | 	jle Npos_5							# if so, goto Npos_1:
0x11e: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x128:                      | Npos_5:
0x128: 62ee                 | 	andq %r14, %r14						# val <= 0?
0x12a: 713d01000000000000   | 	jle Npos_6							# if so, goto Npos_2:
0x133: c0f00100000000000000 | 	iaddq $1, %rax						# count_1++
                            | 
0x13d:                      | Npos_6:
0x13d: c0f73000000000000000 | 	iaddq $48, %rdi		# src+=6
0x147: c0f63000000000000000 | 	iaddq $48, %rsi		# dst+=6
0x151: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# len-=6
                            | 
0x15b: 754700000000000000   | 	jge Loop_1			# if so, goto Loop:
                            | 
0x164:                      | Post:
0x164: c0f20600000000000000 | 	iaddq $6, %rdx
0x16e: 71c701000000000000   | 	jle Done			# if so, goto Done:
                            | 
0x177:                      | Loop_2:	
0x177: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x181: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x183: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x18d: 71a001000000000000   | 	jle Npos_7				# if so, goto Npos:
0x196: c0f00100000000000000 | 	iaddq $1, %rax			# count++
                            | 
0x1a0:                      | Npos_7:	
0x1a0: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x1aa: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x1b4: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1be: 767701000000000000   | 	jg Loop_2			# if so, goto Loop_2:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1c7:                      | Done:
0x1c7: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1c8:                      | End:
                            | #/* $end ncopy-ys */
0x1c8:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1c8:                      | 	.align 8
0x1c8:                      | src:
0x1c8: 0100000000000000     | 	.quad 1
0x1d0: 0200000000000000     | 	.quad 2
0x1d8: fdffffffffffffff     | 	.quad -3
0x1e0: fcffffffffffffff     | 	.quad -4
0x1e8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1f0:                      | 	.align 16
0x1f0:                      | Predest:
0x1f0: fadebc0000000000     | 	.quad 0xbcdefa
0x1f8:                      | dest:
0x1f8: abefcd0000000000     | 	.quad 0xcdefab
0x200: abefcd0000000000     | 	.quad 0xcdefab
0x208: abefcd0000000000     | 	.quad 0xcdefab
0x210: abefcd0000000000     | 	.quad 0xcdefab
0x218:                      | Postdest:
0x218: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x220:                      | .align 8
                            | # Run time stack
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
                            | 
0x2a0:                      | Stack:
